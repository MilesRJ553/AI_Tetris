using WindowsInput;
using WindowsInput.Native;

class BOARD_HANDLER
{

    /* =============== Class Attributes =============== */
    private E_CELL_STATUS[,] gameBoard = new E_CELL_STATUS[15, 10];


    /* =============== Constructors =============== */

    public BOARD_HANDLER()
    {
        // Iterate through each cell of the gameBoard
        for (int row = 0; row < this.gameBoard.GetLength(0); ++row)
        {
            for (int col = 0; col < this.gameBoard.GetLength(1); ++col)
            {
                // Set each cell as empty
                this.gameBoard[row, col] = E_CELL_STATUS.EMPTY;
            }
        }
    }


    /// <summary>
    /// Updates the gameBoard using a 2D boolean array generated by UI_HANDLER.getGameGrid
    /// Relies on row completion being handles seperately (inted to be handled on spacebar down)
    /// </summary>
    /// <param name="uiGameBoard"></param>
    private void compareGameBoards(bool[,] uiGameBoard)
    {
        // Declaring local variables
        E_CELL_STATUS cellStatus;
        bool uiCellStatus;

        //Check the argument: uiGameBoard has the correct dimensions
        if (uiGameBoard.GetLength(0) != gameBoard.GetLength(0) || uiGameBoard.GetLength(1) != gameBoard.GetLength(1))
        {
            Console.WriteLine("================\nERROR: Printing uiGameBoard\n================");
            MAIN.printGameBoard(uiGameBoard);
            throw new Exception("uiGameBoard should have the dimension [15,10]");
        }

        //  Iterate through each cell of the grid
        for (int row = 0; row < uiGameBoard.GetLength(0); ++row)
        {
            for (int col = 0; col < uiGameBoard.GetLength(1); ++col)
            {
                cellStatus = this.gameBoard[row, col];

                // Ignore any settled cells
                if (cellStatus != E_CELL_STATUS.SETTLED)
                {
                    uiCellStatus = uiGameBoard[row, col];

                    // Updates the gameBoard (falling or empty)
                    if (uiCellStatus)
                    {
                        this.gameBoard[row, col] = E_CELL_STATUS.FALLING;
                    }
                    else
                    {
                        this.gameBoard[row, col] = E_CELL_STATUS.EMPTY;
                    }
                }
            }
        }
    }

    /// <summary>
    /// Sets all falling pieces to settled
    /// </summary>
    private void setFallingSettled()
    {
        // Declare local variables
        E_CELL_STATUS cellStatus;

        // Iterate through each cell of the gameBoard
        for (int row = 0; row < this.gameBoard.GetLength(0); ++row)
        {
            for (int col = 0; col < this.gameBoard.GetLength(1); ++col)
            {
                cellStatus = this.gameBoard[row, col];

                // Updates the cell if its status is falling
                if (cellStatus == E_CELL_STATUS.FALLING)
                {
                    this.gameBoard[row, col] = E_CELL_STATUS.SETTLED;
                }

            }
        }
    }

    private void clearFullRows()
    {
        // Declare local variables
        bool rowComplete;
        int col;

        // Iterate through each row
        for (int row = 0; row < this.gameBoard.GetLength(0); ++row)
        {
            rowComplete = true;
            col = 0;
            // Iterates through a row of cells until it finds an empty cell
            while (col < this.gameBoard.GetLength(1) && rowComplete)
            {
                if (this.gameBoard[row, col] != E_CELL_STATUS.SETTLED)
                {
                    rowComplete = false; // Sets the rowComplete flag to false if there are any unsettled cells
                }
                ++col;
            }
            if (rowComplete)
            {
                //TODO: write method to remove row
            }
        }
    }


    /* =============== Debug Methods =============== */
    public E_CELL_STATUS[,] getGameBoard()
    {
        return this.gameBoard;
    }

    public void printGameBoard()
    {
        E_CELL_STATUS cellStatus;

        for (int row = 0; row < this.gameBoard.GetLength(0); ++row)
        {
            for (int col = 0; col < this.gameBoard.GetLength(1); ++col)
            {
                cellStatus = this.gameBoard[row, col];
                Console.Write("|");
                switch (cellStatus)
                {
                    case E_CELL_STATUS.EMPTY:
                        Console.Write(" |");
                        break;
                    case E_CELL_STATUS.FALLING:
                        Console.Write("F|");
                        break;
                    case E_CELL_STATUS.SETTLED:
                        Console.Write("S|");
                        break;
                }
            }
            Console.Write("\n"); 
        }
    }

}